{"version":3,"file":"index.js","sources":["../src/validations/required.validation.js","../src/validations/length.validation.js","../src/validations/rut.validation.js","../src/helpers/form.helpers.js","../src/helpers/formatters.helpers.js","../src/components/Textfield.js","../src/components/Field.js","../src/components/FormField.js"],"sourcesContent":["export const requiredValidation = (value) => {\n  const valid = value.toString().trim() !== \"\";\n  return valid;\n};\n","export const lengthValidation = (value, options) => {\n  const lengthOptions =\n    typeof options === 'object'\n      ? {\n          min: options.min,\n          max: options.max,\n          minMessage: options.minMessage\n            ? options.minMessage\n            : `This field must have a minnimum of ${options.min} characters`,\n          maxMessage: options.maxMessage\n            ? options.maxMessage\n            : `This field must have a maximum of ${options.max} characters`,\n        }\n      : {\n          min: options,\n          minMessage: `This field must have a minnimum of ${options} characters`,\n        };\n\n  const length = value.toString().trim().length;\n  let valid = true;\n  let message = null;\n\n  if (length < lengthOptions.min) {\n    valid = false;\n    message = lengthOptions.minMessage;\n  } else if (lengthOptions.max && lengthOptions.max < length) {\n    valid = false;\n    message = lengthOptions.maxMessage;\n  }\n  return [valid, message];\n};\n","const validateRut = (rut) => {\n  // Limpieza de . y -\n  // eslint-disable-next-line\n  let value = rut.replace(/\\./g, \"\").replace(/\\-/g, \"\");\n\n  // Extracción de dígito cuerpo y verificador\n  let body = value.slice(0, -1);\n\n  if (body.length < 7) {\n    return false;\n  }\n\n  // Invertimos el orden de los factores\n  let rutReversed = body.trim().split(\"\").reverse();\n\n  // Multiplicación\n  let sum = 0;\n  let multiplier = 2;\n  for (let i = 0; i < rutReversed.length; i++) {\n    sum += parseInt(rutReversed[i]) * multiplier;\n    multiplier = multiplier === 7 ? 2 : multiplier + 1;\n  }\n\n  // Divide la suma por 11\n  let quotient = Math.trunc(sum / 11);\n  // Multiplica el cociente por 11\n  let product = quotient * 11;\n  // A sum se le resta product\n  let minus = Math.abs(sum - product);\n  // Finalmente se obtiene el dígito verificador\n  let checkDigit = 11 - minus < 10 ? 11 - minus : 11 - minus === 11 ? 0 : \"K\";\n\n  return checkDigit;\n};\n\nexport const rutValidation = (value) => {\n  let valid = false;\n  const dv = validateRut(value);\n  if (dv !== false) {\n    if (\n      dv ===\n      (value.slice(-1).toUpperCase() === \"K\" ? \"K\" : parseInt(value.slice(-1)))\n    ) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n  }\n\n  return valid;\n};\n","import { requiredValidation } from \"../validations/required.validation\";\nimport { lengthValidation } from \"../validations/length.validation\";\nimport { rutValidation } from \"../validations/rut.validation\";\n\nexport const checkValidations = (value, validations) => {\n  let hasError = false;\n  let validationMessage = \"\";\n\n  Object.entries(validations).map(([key, options]) => {\n    switch (key) {\n      case \"required\":\n        let passRequired = requiredValidation(value);\n        hasError = hasError || !passRequired;\n        validationMessage = options.message\n          ? options.message\n          : \"Required field\";\n        return;\n      case \"length\":\n        let [lengthValid, message] = lengthValidation(value, options);\n        hasError = hasError || !lengthValid;\n        validationMessage = message;\n        return;\n      case \"chileanRut\":\n        let rutValid = rutValidation(value);\n        hasError = hasError || !rutValid;\n        validationMessage = options.message ? options.message : \"Invalid RUT\";\n      default:\n        return;\n    }\n  });\n\n  return { hasError, validationMessage };\n};\n","const rutFormatter = (value) => {\n  let newValue = null;\n  // Limpieza de . y -\n  // eslint-disable-next-line\n  let cleanRut = value.replace(/\\./g, \"\").replace(/\\-/g, \"\");\n  let body = cleanRut.slice(0, -1);\n  let checker = cleanRut.slice(-1).toUpperCase();\n\n  if (body.length > 0) {\n    let rutFormatted = \"\";\n    for (let j = 1, i = body.length - 1; i >= 0; i--, j++) {\n      let number = body.charAt(i);\n      rutFormatted = number + rutFormatted;\n      if (j % 3 === 0 && j <= body.length - 1) {\n        rutFormatted = \".\" + rutFormatted;\n      }\n    }\n    newValue = `${rutFormatted}-${checker}`;\n  } else {\n    newValue = value;\n  }\n  return newValue;\n};\n\nexport const formatValue = (value, formatters) => {\n  let formattedValue = value;\n  Object.entries(formatters).map(([key, format]) => {\n    switch (key) {\n      case \"chileanRut\":\n        if (format) {\n          formattedValue = rutFormatter(value);\n        }\n        return;\n      default:\n        return;\n    }\n  });\n\n  return formattedValue;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport { checkValidations } from \"../helpers/form.helpers\";\nimport { formatValue } from \"../helpers/formatters.helpers\";\n\nconst defaultConfig = {\n  //   autoComplete: \"\",\n  //   autoFocus: false,\n  //   classes: null,\n  color: \"primary\",\n  //   defaultValue: \"\",\n  //   disabled: false,\n  error: false,\n  //   FormHelperTextProps: null,\n  //   fullWidth: false,\n  helperText: null,\n  id: \"field\",\n  //   InputLabelProps: null,\n  //   inputProps: null,\n  //   InputProps: null,\n  //   inputref: null,\n  label: \"\",\n  margin: \"normal\",\n  //   multiline: false,\n  name: \"field\",\n  //   onChange: null,\n  //   placeholder: \"\",\n  //   required: false,\n  //   rows: 2,\n  //   rowsMax: 4,\n  size: \"small\",\n  type: \"text\",\n  //   value: \"\",\n  variant: \"outlined\",\n};\n\nconst Textfield = ({\n  config,\n  validations = null,\n  formatters = null,\n  value: propsValue,\n  change = null,\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    if (propsValue) {\n      setValue(propsValue);\n    }\n  }, [propsValue]);\n\n  const updateForm = (event) => {\n    event.preventDefault();\n    setValue(event.target.value);\n  };\n\n  // Run validations\n  useEffect(() => {\n    if (validations) {\n      const { hasError, validationMessage } = checkValidations(\n        value,\n        validations\n      );\n      if (hasError) {\n        setError(true);\n        setMessage(validationMessage);\n      } else {\n        setError(false);\n      }\n    }\n    if (formatters) {\n      const newValue = formatValue(value, formatters);\n      setValue(newValue);\n    }\n\n    if (change) {\n      change();\n    }\n  }, [value]);\n\n  return (\n    <TextField\n      {...defaultConfig}\n      {...config}\n      error={error}\n      value={value}\n      // onChange={change ? change() : updateForm}\n      onChange={updateForm}\n      helperText={\n        error ? message : config?.helperText ? config.helperText : null\n      }\n    />\n  );\n};\n\nexport default Textfield;\n","import React from \"react\";\nimport Textfield from \"./Textfield\";\n\n// const showError = (data) => {\n//   const hasError = formData.validation && !formData.valid;\n//   return hasError ? (\n//     <div className=\"error_label\">{formData.validationMessage}</div>\n//   ) : null;\n// };\n\nconst TemplateToRender = ({\n  element,\n  config,\n  validations,\n  formatters,\n  value,\n  change,\n}) => {\n  switch (element) {\n    case \"input\":\n      return (\n        <Textfield\n          config={config}\n          validations={validations}\n          formatters={formatters}\n          value={value}\n          change={change}\n        />\n      );\n    default:\n      return (\n        <Textfield\n          config={config}\n          validations={validations}\n          formatters={formatters}\n          value={value}\n          change={change}\n        />\n      );\n  }\n};\n\nconst Field = ({\n  element,\n  config,\n  validations,\n  formatters,\n  value,\n  change,\n}) => {\n  return (\n    <TemplateToRender\n      element={element}\n      config={config}\n      validations={validations}\n      formatters={formatters}\n      value={value}\n      change={change}\n    />\n  );\n};\n\nexport default Field;\n","import React from \"react\";\n// import { TextField } from \"@material-ui/core\";\nimport Field from \"./Field\";\n// import styled from \"@emotion/styled\";\n// import { font, primaryColors, shape } from \"config/styles\";\n\n// const Wrapper = styled.button`\n//   ${font}\n//   ${primaryColors}\n//   ${shape}\n// `;\n\nexport default function FormField({\n  element = \"input\",\n  change = null,\n  value = null,\n  config = null,\n  validations = null,\n  formatters = null,\n}) {\n  // return <Wrapper><TextField variant=\"outlined\" label={label} /></Wrapper>;\n  return (\n    <Field\n      element={element}\n      config={config}\n      validations={validations}\n      formatters={formatters}\n      value={value}\n      change={change}\n    />\n  );\n}\n\n// export default Button;\n"],"names":["requiredValidation","value","toString","trim","lengthValidation","options","lengthOptions","_typeof","min","max","minMessage","maxMessage","length","valid","message","validateRut","rut","body","replace","slice","rutReversed","split","reverse","sum","multiplier","i","parseInt","product","Math","trunc","minus","abs","rutValidation","dv","toUpperCase","checkValidations","validations","hasError","validationMessage","Object","entries","map","key","passRequired","lengthValid","rutValid","rutFormatter","newValue","cleanRut","checker","rutFormatted","j","charAt","formatValue","formatters","formattedValue","format","defaultConfig","color","error","helperText","id","label","margin","name","size","type","variant","Textfield","config","propsValue","change","useState","setValue","setError","setMessage","useEffect","React","TextField","onChange","event","preventDefault","target","TemplateToRender","element","Field","FormField"],"mappings":"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"}